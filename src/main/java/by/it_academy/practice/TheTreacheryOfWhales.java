package by.it_academy.practice;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.List;

/**
 * @author Maxim Tereshchenko
 */
class TheTreacheryOfWhales {

    public static void main(String[] args) throws IOException {
        System.out.println(leastFuelToAlignWithConstantBurnRate(positions1())); //37
        System.out.println(leastFuelToAlignWithConstantBurnRate(positions2())); //355521

        System.out.println(leastFuelToAlignWithIncreasingBurnRate(positions1())); //206
        System.out.println(leastFuelToAlignWithIncreasingBurnRate(positions2())); //100148777
    }

    private static List<Integer> positions1() {
        List<Integer> positions = new ArrayList<>();
        positions.add(16);
        positions.add(1);
        positions.add(2);
        positions.add(0);
        positions.add(4);
        positions.add(2);
        positions.add(7);
        positions.add(1);
        positions.add(2);
        positions.add(14);
        return positions;
    }

    private static List<Integer> positions2() throws IOException {
        String line = Files.readString(Paths.get("src/main/resources/TheTreacheryOfWhales.txt"));
        List<Integer> measurements = new ArrayList<>();

        for (String part : line.split(",")) {
            measurements.add(Integer.valueOf(part));
        }

        return measurements;
    }

    /**
     * Гигантский кит решил, что ваша подводная лодка станет его едой, и он намного быстрее вас. Бежать некуда!
     * Внезапно рой крабов (каждый в своей крошечной подводной лодке - иначе для них слишком глубоко) приближается,
     * чтобы спасти вас! Похоже, они готовятся проделать дыру в океанском дне. Датчики указывают на массивную систему
     * подземных пещер сразу за тем местом, куда они целятся!
     * Чтобы взорвать достаточно большую дыру для вашей подводной лодки, все крабы должны быть в одной точке,
     * прежде чем у них будет достаточно мощности. Однако не похоже, что они выровняются до того, как кит поймает вас!
     * Может быть, вы можете помочь?
     * Важная деталь — подводные лодки-крабы могут двигаться только горизонтально.
     * Вы быстро составляете список положений каждого краба (входные данные). Подводные лодки-крабы
     * имеют ограниченное количество топлива, поэтому вам нужно найти способ, чтобы все их горизонтальные положения
     * совпадали, но чтобы они потратили как можно меньше топлива.
     * Например, рассмотрим следующие горизонтальные положения:
     * 16,1,2,0,4,2,7,1,2,14
     * Это означает, что есть краб с горизонтальной позицией 16, краб с горизонтальной позицией 1 и так далее.
     * Каждое изменение 1 шага в горизонтальном положении одного краба стоит 1 топливо.
     * Вы можете выбрать любое горизонтальное положение, чтобы выровнять их все, но горизонтальное положение 2
     * требует наименьшего расхода топлива:
     * Переход с 16 на 2: 14 топлива
     * Переход от 1 к 2: 1 топливо
     * Переход от 2 к 2: 0 топлива
     * Переход от 0 к 2: 2 топлива
     * Переход с 4 на 2: 2 топлива
     * Переход от 2 к 2: 0 топлива
     * Переход с 7 на 2: 5 топлива
     * Переход от 1 к 2: 1 топливо
     * Переход от 2 к 2: 0 топлива
     * Переход с 14 на 2: 12 топлива
     * Это стоит в общей сложности 37 топлива. Это самый дешевый возможный результат;
     * более дорогие результаты включают выравнивание в позиции 1 (топливо 41), позиции 3 (топливо 39)
     * или позиции 10 (топливо 71).
     * Определите горизонтальное положение, в котором крабы могут выровняться, используя наименьшее количество топлива.
     * Сколько топлива они должны потратить, чтобы соответствовать этой позиции?
     */
    private static int leastFuelToAlignWithConstantBurnRate(List<Integer> positions) {
        return 0;
    }

    /**
     * Крабы, похоже, не заинтересованы в предложенном вами решении.
     * Возможно, вы неправильно понимаете крабовую инженерию?
     * Как оказалось, двигатели крабовых подводных лодок не сжигают топливо с постоянной скоростью.
     * Вместо этого каждое изменение 1 шага в горизонтальном положении стоит на 1 единицу топлива больше,
     * чем предыдущее: первый шаг стоит 1, второй шаг стоит 2, третий шаг стоит 3 и так далее.
     * По мере того как каждый краб движется, дальнейшее движение становится все дороже.
     * Это изменяет наилучшее горизонтальное положение, чтобы выровнять их всех;
     * в приведенном выше примере это положение 5:
     * Переход с 16 на 5: 66 топлива
     * Переход от 1 к 5: 10 топлива
     * Переход от 2 к 5: 6 топлива
     * Переход от 0 к 5: 15 топлива
     * Переход с 4 на 5: 1 топливо
     * Переход от 2 к 5: 6 топлива
     * Переход от 7 к 5: 3 топлива
     * Переход от 1 к 5: 10 топлива
     * Переход от 2 к 5: 6 топлива
     * Переход с 14 на 5: 45 топлива
     * Это стоит в общей сложности 168 топлива. Это новый самый дешевый возможный результат;
     * вместо этого старая позиция выравнивания (2) теперь стоит 206 топлива.
     * Определите горизонтальное положение, в котором крабы могут выровняться, используя наименьшее количество топлива,
     * чтобы они могли проложить вам путь к отступлению!
     * Сколько топлива они должны потратить, чтобы соответствовать этой позиции?
     */
    private static int leastFuelToAlignWithIncreasingBurnRate(List<Integer> positions) {
        return 0;
    }
}
